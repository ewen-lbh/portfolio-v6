extends ../../layout

block append head
	- const hasTag = tagName => CurrentWork.Metadata.Tags.map(lookupTag).map(t => t.Singular).includes(lookupTag(tagName).Singular)
	- const isAudio = media => media.ContentType.startsWith("audio/")
	- const isVideo = media => media.ContentType.startsWith("video/")
	- const audioMediae = (CurrentWork.Media || []).filter(isAudio)
	- const videoMediae = (CurrentWork.Media || []).filter(isVideo)
	- const thumb = thumbnailKey(CurrentWork) && (CurrentWork.Media || []).find(m => m.Path === thumbnailKey(CurrentWork))
	//- - const NUMBERED_TRACK_REGEX = /(\d+)\.\s+(.+)/

	link(href=asset("vendor/dialog-polyfill.css") rel="stylesheet")
	link(href=asset("spinner-animation.css") rel="stylesheet")

	+metadata({ canonical: CurrentWork.ID, kind: hasTag("music") ? "music.album" : "website", thumbnail: ThumbnailSource(CurrentWork, 600), thumbnail_dimensions: thumb ? thumb.Dimensions : {Height: 0, Width: 0, AspectRatio: 0}, title: CurrentWork.Title, player_url: audioMediae.length + videoMediae.length ? `https://${current_language}.ewen.works/${CurrentWork.ID}/player` : "", description: CurrentWork.Summary, })

	if hasTag("music")
		meta(
			content=CreatedAt(CurrentWork).toISOString()
			property="music:release_date"
		)
		meta(content="ewen-lbh" property="music:musician")

		//- each audio in audioMediae
		//- 	if NUMBERED_TRACK_REGEX.test(audio.Title)
		//- 		- let [_, trackNumber, title] = NUMBERED_TRACK_REGEX.\s+(.+)/.exec(audio.Title)
		//- 		meta(content=media(`${CurrentWork.ID}/${audio.Path}`) property="music:song")
		//- 		meta(content="1" property="music:song:disc")
		//- 		meta(content=parseFloat(trackNumber) property="music:song:track")

	else if videoMediae.length === 1
		meta(
			content=media(`${CurrentWork.ID}/${videoMediae[0].Path}`)
			property="og:video"
		)

block content
	- const hours = Object.keys(wakatimeAggregated.projects).includes(CurrentWork.ID) ? Math.floor(wakatimeAggregated.projects[CurrentWork.ID] / 3600) : 0
	- const mediaType = contentType => (contentType === "application/pdf" ? "pdf" : contentType.split("/")[0])

	ul.tags-and-collections
		each tag in CurrentWork.Metadata.Tags.map(lookupTag).filter(t => t !== undefined)
			li.tag: a(i18n href=`/${ URLName(tag) }`)= tag.Singular
		if CollectionsOfWork(CurrentWork).length
			li.part-of-collections(i18n)
				if CollectionsOfWork(CurrentWork).length == 1
					| part of the collection
				else
					| part of the collections
			each collection in CollectionsOfWork(CurrentWork)
				li.collection: a(href=`/${ collection.ID }`)= collection.Title

	if IsWIP(CurrentWork)
		a.work-in-progress(i18n href="/#wip") work in progress

	h1(data-style=CurrentWork.Metadata.Title)= CurrentWork.Title

	section.contents
		each cell in CurrentWorkLayedOut || []
			.element(data-element-type=cell.Type style=CellCSS(cell))
				if cell.Type == "paragraph"
					!= cell.Content
				if cell.Type == "link" || cell.ContentType == "directory"
					a(
						href=cell.URL || media(`${CurrentWork.ID}/${cell.Path}`)
						id=cell.ID
						title=cell.Title
					)= cell.Name || cell.Alt
				if cell.Type == "media" && cell.ContentType != "directory"
					figure(
						data-content-type=cell.ContentType
						data-general-content-type=cell.GeneralContentType
					)
						- let source = media(`${CurrentWork.ID}/${cell.Path}`)
						- let cellWidthRatio = cellWidth(cell) / layoutWidth(CurrentWorkLayedOut)
						case mediaType(cell.ContentType)
							when "pdf"
								a(href=source title=translate("Click to read the PDF"))
									img(
										data-aspect-ratio=cell.Dimensions.AspectRatio
										height=cell.Dimensions.Height
										sizes=`(max-width: 1000px) 95vw, ${cellWidthRatio * 1000}px`
										src=ThumbnailSource(CurrentWork, cellWidthRatio * 1200, cell.Path)
										srcset=ThumbnailSourcesSet(CurrentWork, cell.Path)
										width=cell.Dimensions.Width
									)
							when "audio"
								audio(
									autoplay=cell.Attributes.Autoplay
									controls=cell.Attributes.Controls
									id=cell.ID
									loop=cell.Attributes.Loop
									muted=cell.Attributes.Muted
									playsinline=cell.Attributes.Playsinline
									src=source
									title=cell.Title
								)
									a(href=source)= source

							when "image"
								img(
									alt=cell.Alt
									data-aspect-ratio=cell.Dimensions.AspectRatio
									data-full-src=source
									height=cell.Dimensions.Height
									id=cell.ID
									sizes=`(max-width: 1000px) 95vw, calc(${cellWidthRatio * 1000}px`
									src=ThumbnailSource(CurrentWork, cellWidthRatio * 1200, cell.Path)
									srcset=ThumbnailSourcesSet(CurrentWork, cell.Path)
									title=cell.Title
									width=cell.Dimensions.Width
								)

							when "video"
								video(
									autoplay=cell.Attributes.Autoplay
									controls=cell.Attributes.Controls
									id=cell.ID
									loop=cell.Attributes.Loop
									muted=cell.Attributes.Muted
									playsinline=cell.Attributes.Playsinline
									src=source
									title=cell.Title
								)
									a(href=source)= source

							default
								a(id=cell.ID src=source)= source

						if cell.Title
							figcaption= cell.Title

	if CurrentWork.Footnotes
		section.footnotes
			h2.footnotes__title(i18n) footnotes
			dl.footnotes__list
				each Value, Key in CurrentWork.Footnotes
					dt(id=`fn:${Key}`)
						a(href=`#fn:${Key}`)= Key
					dd
						p!= Value
						a.footnotes__list__item__reference-link(i18n href=`#fnref:${Key}`)
							| ↖ Back to the text
						//- TODO: handle multiple references (needs chanin >= portfoliodb to add footnotes[].references)
						//- { if (.References).length >= 2 }
						//- ol.footnotes__list__item__references
						//- 	{ ran.References >= }
						//- 	li: a(href="#fnref:{ . }") ↗ { . }
						//- 	{ end }
						//- { end }

	if CurrentWork.Metadata.MadeWith.length
		section.made-with
			h2.made-with__title(i18n) made with
			p.made-with__explainer(i18n) the software, frameworks, libraries, materials and services I used to make this
			ul.made-with__list
				each tech in CurrentWork.Metadata.MadeWith.map(lookupTech).filter(t => t !== undefined)
					li.made-with__item
						a(href=`/using/${tech.URLName}` title=translate("More..."))
							img.made-with__item__logo(
								alt=translate(`%s’s logo`, tech.DisplayName)
								src=asset(`logos/${tech.URLName}.svg`)
							)
							if tech.Author
								span.made-with__item__subline= tech.Author
							span.made-with__item__name= tech.DisplayName

	if hours > 1
		section.hours
			h2.hours__title #{ hours }+ #[i18n hours spent on this]

	+media-closeup

	style!= `:root { ${Object.entries(ColorsMap(CurrentWork)).map(([Key, Value]) => `--${Key}: ${Value};`).join("\n")} }`

	if CurrentWork.Metadata.PageBackground
		style.
			body {
				background-image: url("!{ media(`${CurrentWork.ID}/${CurrentWork.Metadata.PageBackground}`) }");
			}

	script(src=asset("vendor/dialog-polyfill.js"))
	script.
		document.querySelectorAll("dialog").forEach(el => {
			dialogPolyfill.registerDialog(el);
		});
	script(src=asset("ui.js"))
