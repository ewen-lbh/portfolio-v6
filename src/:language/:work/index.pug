extends ../../layout

block append head
	- const hasTag = tagName => currentWork.metadata.tags.map(lookupTag).map(t => t.singular).includes(lookupTag(tagName).singular)
	- const isAudio = media => media.contentType.startsWith("audio/")
	- const isVideo = media => media.contentType.startsWith("video/")
	- const videos = currentWork.content.blocks.filter(b => b.type === "media" && isVideo(b))
	- const audios = currentWork.content.blocks.filter(b => b.type === "media" && isAudio(b))
	- const gridTemplateAreas = constantWidth(currentWork.content.layout).map(row => '"'+ row.map(cell => `block__${cell}`).join(" ") + '"').join(" ")
	//- - const NUMBERED_TRACK_REGEX = /(\d+)\.\s+(.+)/

	link(href=asset("vendor/dialog-polyfill.css") rel="stylesheet")
	link(href=asset("spinner-animation.css") rel="stylesheet")

	+metadata({ canonical: currentWork.id, kind: hasTag("music") ? "music.album" : "website", thumbnail: bestThumbnail(currentWork, 600), thumbnail_dimensions: thumb ? thumb.dimensions : {Height: 0, Width: 0, AspectRatio: 0}, title: currentWork.title, player_url: audios.length + videos.length ? `https://${currentLanguage}.ewen.works/${currentWork.id}/player` : "", description: currentWork.summary })

	if hasTag("music")
		meta(
			content=CreatedAt(currentWork).toISOString()
			property="music:release_date"
		)
		meta(content="ewen-lbh" property="music:musician")

		//- each audio in audioMediae
		//- 	if NUMBERED_TRACK_REGEX.test(audio.title)
		//- 		- let [_, trackNumber, title] = NUMBERED_TRACK_REGEX.\s+(.+)/.exec(audio.title)
		//- 		meta(content=media(`${currentWork.id}/${audio.Path}`) property="music:song")
		//- 		meta(content="1" property="music:song:disc")
		//- 		meta(content=parseFloat(trackNumber) property="music:song:track")

	else if videos.length === 1
		meta(
			content=media(`${currentWork.id}/${videos[0].Path}`)
			property="og:video"
		)

block content
	- const hours = Object.keys(wakatimeAggregated.projects).includes(currentWork.id) ? Math.floor(wakatimeAggregated.projects[currentWork.id] / 3600) : 0
	- const mediaType = contentType => (contentType === "application/pdf" ? "pdf" : contentType.split("/")[0])

	ul.tags-and-collections
		each tag in currentWork.metadata.tags.map(lookupTag).filter(t => t !== undefined)
			li.tag: a(i18n href=`/${ urlName(tag) }`)= tag.singular

	if isWIP(currentWork)
		a.work-in-progress(i18n href="/#wip") work in progress

	h1(data-style=currentWork.metadata.titleStyle)= currentWork.content.title

	section.contents(style=`grid-template-areas: ${gridTemplateAreas};`)
		each block in currentWork.content.blocks || []
			.element(data-element-type=block.type style=`grid-area: block__${block.id}`)
				if block.type == "paragraph"
					!= block.content
				if block.type == "link" || block.contentType == "directory"
					a(
						href=block.url || media(block.distSource)
						id=block.id
						title=block.title
					)=block.text || block.alt
				if block.type == "media" && block.contentType != "directory"
					figure(
						data-content-type=block.contentType
						data-general-content-type=mediaType(block.contentType)
					)
						- let cellWidthRatio = cellWidth(currentWork.content.layout, block.id) / layoutWidth(currentWork.content.layout)
						case mediaType(block.contentType)
							when "pdf"
								a(href=media(block.distSource) title=translate("Click to read the PDF"))
									img(
										data-aspect-ratio=block.dimensions.aspectRatio
										height=block.dimensions.height
										sizes=`(max-width: 1000px) 95vw, ${cellWidthRatio * 1000}px`
										src=bestThumbnail(currentWork, cellWidthRatio * 1200)
										srcset=thumbnailSourcesSet(currentWork, block.Path)
										width=block.dimensions.width
									)
							when "audio"
								audio(
									autoplay=block.attributes.autoplay
									controls=block.attributes.controls
									id=block.id
									loop=block.attributes.loop
									muted=block.attributes.muted
									playsinline=block.attributes.playsinline
									src=media(block.distSource)
									title=block.title
								)
									a(href=media(block.distSource))=media(block.distSource)

							when "image"
								img(
									alt=block.Alt
									data-aspect-ratio=block.dimensions.aspectRatio
									data-full-src=source
									height=block.dimensions.height
									id=block.id
									sizes=`(max-width: 1000px) 95vw, calc(${cellWidthRatio * 1000}px`
									src=bestThumbnail(currentWork, cellWidthRatio * 1200)
									srcset=thumbnailSourcesSet(currentWork)
									title=block.title
									width=block.dimensions.width
								)

							when "video"
								video(
									autoplay=block.attributes.autoplay
									controls=block.attributes.controls
									id=block.id
									loop=block.attributes.loop
									muted=block.attributes.muted
									playsinline=block.attributes.playsinline
									src=source
									title=block.title
								)
									a(href=media(block.distSource))= media(block.distSource)

							default
								a(id=block.id src=media(block.distSource))= media(block.distSource)

						if block.title
							figcaption= block.title

	if Object.keys(currentWork.content.footnotes).length
		section.footnotes
			h2.footnotes__title(i18n) footnotes
			dl.footnotes__list
				each value, key in currentWork.content.footnotes
					dt(id=`fn:${key}`)
						a(href=`#fn:${key}`)= key
					dd
						p!= value
						a.footnotes__list__item__reference-link(i18n href=`#fnref${key}`)
							| ↖ Back to the text

	if currentWork.metadata.madeWith.length
		section.made-with
			h2.made-with__title(i18n) made with
			p.made-with__explainer(i18n) the software, frameworks, libraries, materials and services I used to make this
			ul.made-with__list
				each tech in currentWork.metadata.madeWith.map(lookupTech)
					li.made-with__item
						a(href=`/using/${tech.urlName}` title=translate("More..."))
							img.made-with__item__logo(
								alt=translate(`%s’s logo`, tech.displayName)
								src=asset(`logos/${tech.urlName}.svg`)
							)
							if tech.author
								span.made-with__item__subline= tech.author
							span.made-with__item__name= tech.displayName

	- const collections = collectionsOfWork(currentWork).filter(c => c.Description !== "")
	if collections.length
		section.collections
			h2.collections__title(i18n) collections
			p.collections__explainer(i18n) this work is part of the following collection#{ collections.length === 1 ? "" : "s" }
			ul.collections__list
				each collection in collections
					li.collections__item
						a(href=`/${ collection.id }`)= collection.title

	if hours > 1
		section.hours
			h2.hours__title #{ hours }+ #[i18n hours spent on this]

	+media-closeup

	style!= `:root { ${Object.entries(colorsMap(currentWork)).map(([key, value]) => `--${key}: ${value};`).join("\n")} }`

	if currentWork.metadata.pageBackground
		style.
			body {
				background-image: url("!{ media(`${currentWork.id}/${currentWork.metadata.pageBackground}`) }");
			}

	script(src=asset("vendor/dialog-polyfill.js"))
	script.
		document.querySelectorAll("dialog").forEach(el => {
			dialogPolyfill.registerDialog(el);
		});
	script(src=asset("ui.js"))
