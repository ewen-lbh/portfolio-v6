extends ../layout

block append head
	link(rel="stylesheet" href=asset("vendor/dialog-polyfill.css"))
	+title(CurrentWork.Title)

block content
	ul.tags: each tag in CurrentWork.Metadata.Tags.map(lookupTag).filter(t => t !== undefined)
		li: a(i18n href=`/${ URLName(tag) }`)=tag.Singular

	if IsWIP(CurrentWork)
		a.work-in-progress(i18n href="/#wip") work in progress

	h1(data-style=CurrentWork.Metadata.Title)=CurrentWork.Title

	section.contents
		each cell in CurrentWorkLayedOut || []
			div.element(style=CellCSS(cell), data-element-type=cell.Type)
				if cell.Type == "paragraph"
					!= cell.Content
				if cell.Type == "link" || cell.ContentType == "directory"
					a(href=cell.URL || media(`${CurrentWork.ID}/${cell.Path}`), id=cell.ID, title=cell.Title)=(cell.Name || cell.Alt)
				if cell.Type == "media" && cell.ContentType != "directory"
					figure(data-content-type=cell.ContentType data-general-content-type=cell.GeneralContentType)
						- let source = media(`${CurrentWork.ID}/${cell.Path}`)
						- let cellWidthRatio = cellWidth(cell)/layoutWidth(CurrentWorkLayedOut)
						case cell.GeneralContentType
							when "pdf"
								a(href=source title=translate("Click to read the PDF"))
									img(
										src=ThumbnailSource(cell, cellWidthRatio * 1200)
										srcset=ThumbnailSourcesSet(cell)
										sizes=`(max-width: 1000px) 95vw, ${cellWidthRatio * 1000}px`
										width=cell.Dimensions.Width
										height=cell.Dimensions.Height
										data-aspect-ratio=cell.Dimensions.AspectRatio
									)
							when "audio"
								audio(
									src=source
									id=cell.ID
									title=cell.Title
									loop=cell.Attributes.Loop
									autoplay=cell.Attributes.Autoplay
									muted=cell.Attributes.Muted
									playsinline=cell.Attributes.Playsinline
									controls=cell.Attributes.Controls
								)
									a(href=source)=source

							when "image"
								img(
									data-full-src=source
									src=ThumbnailSource(cell, cellWidthRatio*1200)
									srcset=ThumbnailSourcesSet(cell)
									sizes=`(max-width: 1000px) 95vw, calc(${cellWidthRatio * 1000}px`
									id=cell.ID
									title=cell.Title
									alt=cell.Alt
									width=cell.Dimensions.Width
									height=cell.Dimensions.Height
									data-aspect-ratio=cell.Dimensions.AspectRatio
								)

							when "video"
								video(
									src=source
									id=cell.ID
									title=cell.Title
									loop=cell.Attributes.Loop
									autoplay=cell.Attributes.Autoplay
									muted=cell.Attributes.Muted
									playsinline=cell.Attributes.Playsinline
									controls=cell.Attributes.Controls
								)
									a(href=source)=source

							default
								a(src=source id=cell.ID)=source

						if cell.Title
							figcaption=cell.Title

	if CurrentWork.Footnotes
		section.footnotes
			h2.footnotes__title(i18n) footnotes
			dl.footnotes__list
				each Value, Key in CurrentWork.Footnotes
					dt(id=`fn:${Key}`)
						a(href=`#fn:${Key}`)=Key
					dd
						p!=Value
						a.footnotes__list__item__reference-link(i18n href=`#fnref:${Key}`)
							| ↖ Back to the text
						//- TODO: handle multiple references (needs chanin >= portfoliodb to add footnotes[].references)
						//- { if (.References).length >= 2 }
						//- ol.footnotes__list__item__references
						//- 	{ ran.References >= }
						//- 	li: a(href="#fnref:{ . }") ↗ { . }
						//- 	{ end }
						//- { end }

	if CurrentWork.Metadata.MadeWith.length
		section.made-with
			h2.made-with__title(i18n) made with
			p.made-with__explainer(i18n) the software, frameworks, libraries, materials and services I used to make this
			ul.made-with__list
				each tech in CurrentWork.Metadata.MadeWith.map(lookupTech).filter(t => t !== undefined)
					li.made-with__item
						a(href=`/using/${tech.URLName}` title=translate("More..."))
							img.made-with__item__logo(
								src=asset(`logos/${tech.URLName}.svg`)
								alt=translate(`${tech.DisplayName}’s logo`)
							)
							if tech.Author
								span.made-with__item__subline=tech.Author
							span.made-with__item__name=tech.DisplayName

	dialog#media-closeup(onclick="this.close()")
		.media.empty
		button.close(onclick="this.parentElement.close()" title="close") ×

	style.
		:root {
			!{Object.entries(ColorsMap(CurrentWork)).map(([Key, Value]) => `--${Key}: ${Value};`).join("\n")}
		}

	if CurrentWork.Metadata.PageBackground
		style.
			body {
				background-image: url('!{ media(`${CurrentWork.ID}/${CurrentWork.Metadata.PageBackground}`) }');
			}

	script(src=asset("vendor/dialog-polyfill.js"))
	script.
		document.querySelectorAll('dialog').forEach(el => {
			dialogPolyfill.registerDialog(el)
		})
	script(src=asset("ui.js"))
